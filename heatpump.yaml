esphome:
  name: "heatpump"
  platform: ESP8266
  board: nodemcuv2
  on_boot:
    then:
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "..."

ota:
  password: "..."

time:
  - platform: homeassistant
    id: homeassistant_time


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

dallas:
  - pin: D5
    update_interval: 3s

i2c:
  scan: False

globals:
  - id: compressor_runtime
    type: int
    restore_value: no
    initial_value: "0"

sensor:
  - platform: dallas
    id: cold
    address: 0xaa0306979462f828
    name: "Cold HVAC Temp out"
  - platform: dallas
    id: coldin
    address: 0x7a031497944f2428
    name: "Cold HVAC Temp in"
  - platform: dallas
    id: hot
    address: 0xda03019794413928
    name: "Hot HVAC Temp out"
  - platform: dallas
    id: hotin
    address: 0x9e031497940df928
    name: "Hot HVAC Temp in"
  - platform: dallas
    id: motortemp
    address: 0x0e031097945b6728
    name: "Compressor Temperature"
  - platform: dallas
    id: tanktemp
    address: 0x12031497944b7728
    name: "Storage tank Temp"
  - platform: pulse_counter
    id: flowhot
    pin: D7
    name: "HVAC Hot Water flow"
    update_interval: 5s
    filters:
    - lambda: return (x / 20) * 60.0;
    unit_of_measurement: "L/min"  
  - platform: pulse_counter
    id: flowcold
    pin: D1
    name: "HVAC Cold Water flow"
    update_interval: 5s
    filters:
    - lambda: return (x / 20) * 60.0;
    unit_of_measurement: "L/min"  
  - platform: template
    name: "Power Consumption"
    id: compressor_power_consumption
    update_interval: 5s
    accuracy_decimals: 2
    unit_of_measurement: "W"
    lambda: |-
      // Get the value of compressor_runtime
      int compressor_runtime_value = id(compressor_runtime);
      float compressor_runtime_hours = compressor_runtime_value / 3600.0; // Convert runtime to hours
      float power_consumption = 1300.0 * compressor_runtime_hours; // Power = Watts * Hours
      return power_consumption;

text_sensor:
  - platform: template
    name: "Function"
    id: function 
  - platform: template
    name: "Power output"
    id: powerout
  - platform: template
    name: "System Status"
    id: system_status

interval:

  - interval: 5s
    then:
      - lambda: |-
          float flowRateHotVal = id(flowhot).state;
          float flowRateColdVal = id(flowcold).state;

          if (flowRateHotVal < 1.0 || flowRateColdVal < 1.0) {
              char buffer[100];
              snprintf(buffer, sizeof(buffer), "Abnormal flow detected: Expected > 1.0L/min, Hot: %.2fL/min, Cold: %.2fL/min", flowRateHotVal, flowRateColdVal);
              id(system_status).publish_state(std::string(buffer));
              return;
          } else {
              id(system_status).publish_state("");
          }

          float compressorTempValue = id(motortemp).state;

          if (compressorTempValue > 99.0) {
              // Switch off compressor and pumpcold if temperature exceeds 100°C
              id(compressor).turn_off();
              id(pumpcold).turn_off();
              id(system_status).publish_state("Compressor overheating: OFF");
          } else if (compressorTempValue < 90.0) {


              id(system_status).publish_state("Compressor temperature normal");
          } else {
              id(system_status).publish_state("");
          }

          static uint32_t compressor_on_time = 0;

          bool sensors_ok = true;

          float deltaTempHot = id(hot).state - id(hotin).state;
          float deltaTempCold = id(cold).state - id(coldin).state;

          // Check if any temperature sensor reports NaN (not-a-number) value
          if (std::isnan(deltaTempHot) || std::isnan(deltaTempCold)) {
              sensors_ok = false;
          }

          float flowRateHot = id(flowhot).state;
          float flowRateCold = id(flowcold).state;

          // Check if water flow rates are below 1 liters/minute
          if (flowRateHot < 1.0 || flowRateCold < 1.0) {
              sensors_ok = false;
          }
          if (id(compressor).state) {
              if (compressor_on_time == 0) {
                  compressor_on_time = millis(); // Start tracking time when compressor turns on
              }

              // Check if 10 seconds have elapsed since the compressor turned on
              if (millis() - compressor_on_time < 10000) {
                  // Wait for 10 seconds before activating failsafe
                  id(system_status).publish_state("OK");
                  return;
              }

              // Increment compressor runtime
              id(compressor_runtime) += 5; // Increment by the interval time (5 seconds)
          } else {
              compressor_on_time = 0; // Reset timer if compressor is off
          }
          // Check compressor temperature
          float compressorTemp = id(motortemp).state;
          if (compressorTemp > 95.0) {
              // Activate cooling fan
              id(compressorcool).turn_on();
          
          }
          if (id(compressor).state) {
              if (compressor_on_time == 0) {
                  compressor_on_time = millis(); // Start tracking time when compressor turns on
              }

              // Check if 10 seconds have elapsed since the compressor turned on
              if (millis() - compressor_on_time < 10000) {
                  // Wait for 10 seconds before activating failsafe
                  id(system_status).publish_state("OK");
                  return;
              }
          } else {
              compressor_on_time = 0; // Reset timer if compressor is off
          }

          if (sensors_ok) {
              // Convert flow rates to liters/minute
              flowRateHot = flowRateHot / 60.0;
              flowRateCold = flowRateCold / 60.0;

              float heatTransferHot = (deltaTempHot * flowRateHot * 4.18);
              char buffer[30]; // Adjust buffer size for additional text
              snprintf(buffer, sizeof(buffer), "%.2f W", heatTransferHot);
              id(powerout).publish_state(std::string(buffer));
              id(system_status).publish_state("OK");
          } else {
              id(system_status).publish_state("Fault: Sensor or Flow issue");

              // Turn off components on error
              id(compressor).turn_off();
              id(pumphot).turn_off();
              id(pumpcold).turn_off();
          }

          static bool error_flag = false;



switch:
  - platform: gpio
    pin: D8
    inverted: False
    id: compressor
    name: "HVAC Compressor"
    icon: "mdi:restart"
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - logger.log: "Compressor turned on"
      - switch.turn_on: pumpcold
      - switch.turn_on: pumphot
    on_turn_off:
      - logger.log: "Compressor just turned off"

  - platform: gpio
    pin: D0
    inverted: True
    id: pumphot
    name: "Pump Hot side"
    icon: mdi:fire
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - logger.log: "Water Pump hot side just turned on"
    on_turn_off:
      - logger.log: "Water Pump hot side just turned off"

  - platform: gpio
    pin: D6
    inverted: True
    id: pumpcold
    name: "Pump Cold side"
    icon: mdi:snowflake
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - logger.log: "Water Pump cold side just turned on"
    on_turn_off:
      - logger.log: "Water Pump cold side just turned off"

  - platform: gpio
    pin: D4
    inverted: True
    id: compressorcool
    name: "Compressor cooling"
    icon: mdi:Valve
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - logger.log: "Compressor too hot"
    on_turn_off:
      - logger.log: "Compressor normal"

climate:

  - platform: thermostat
    id: climatehot
    name: "Heater Thermostat"
    sensor: tanktemp
    icon: mdi:thermostat
    min_heating_off_time: 60s
    min_heating_run_time: 0s
    min_idle_time: 60s
    heat_action:
      - delay: 1s
      - switch.turn_on: pumpcold
      - switch.turn_on: compressor
      - switch.turn_on: pumphot
      - logger.log: "Heating"
      - text_sensor.template.publish:
          id: function
          state: "Heating"
    idle_action:
      - switch.turn_off: compressor
      - delay: 20s
      - switch.turn_off: pumpcold
      - text_sensor.template.publish:
          id: function
          state: "Idle"
      - delay: 5min
    default_preset: Summer
    preset:
      - name: Summer
        default_target_temperature_low: 50 °C
      - name: Winter
        default_target_temperature_low: 60 °C
    visual:
      min_temperature: 30
      max_temperature: 70
      temperature_step: 1


